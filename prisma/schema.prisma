// Datasource Configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma Client Generator
generator client {
  provider = "prisma-client-js"
}

// Enum pour les rôles des utilisateurs
enum Role {
  ADMIN
  CLIENT
}

// Enum pour les statuts des lives
enum LiveStatus {
  PENDING
  LIVE
  COMPLETED
}

// Enum pour les statuts des demandes d'accès
enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

// Modèle Utilisateur
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String          @default("") // Valeur par défaut vide ou spécifique
  role          Role            @default(CLIENT)  // Role par défaut
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  VerificationToken VerificationToken[]

  // Relation avec les lives
  liveStreams   Live[]          @relation("LiveViewers")
}

// Modèle Compte (pour l'authentification tiers)
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// Modèle Session (pour les sessions utilisateurs)
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modèle Token de Vérification (pour la vérification d'email ou réinitialisation de mot de passe)

// Modèle Authenticator (optionnel pour WebAuthn)
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Modèle Live (pour gérer les événements en direct)
model Live {
  id          String      @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      LiveStatus @default(PENDING)

  // Les demandes d'accès pour ce live
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relation avec les utilisateurs (qui regardent ce live)
  viewers     User[]      @relation("LiveViewers")
}

// Modèle Request (pour gérer les demandes d'accès d'un utilisateur à un live)
model Request {
  id              String   @id @default(uuid())
  name            String
  surname         String
  functionInChurch String
  status          String  @default("PENDING")
  createdAt       DateTime @default(now())
}

// Modèle VerificationToken (pour la vérification d'email ou réinitialisation de mot de passe)
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  userId     String // Ajout d'un champ userId pour relier le token à un utilisateur
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([identifier, token])
}
